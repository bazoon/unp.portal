type Query {
  users: [User]
  getUser(id: Int): User
  projectGroups: [ProjectGroupInfo]
  organizations: [Organization]
  positions: [Position]
}

type Mutation {
  subscribeToGroup(groupId: Int): GroupSubscription
  unsubscribeFromGroup(groupId: Int): GroupSubscription
  createGroup(input: CreateProjectInput): ProjectGroupInfo
  createUser(input: CreateUserInput): User
  editUser(input: EditUserInput): User
  deleteUser(id: Int): Int
}

type GroupSubscription {
  id: Int
  title: String
}

type User {
  id: Int
  isAdmin: Boolean
  name: String
  login: String
  avatar: String
  role: Role
  position: Position
  organization: Organization
}

type Position {
  id: Int
  name: String
}

type Role {
  id: Int
  name: String
}

type Organization {
  id: Int
  name: String
  fullName: String
  inn: String
  address: String
}

type ProjectGroup {
  id: Int
  title: String
  avatar: String
  description: String
  isOpen: Boolean
  user: User
}

type ProjectGroupInfo {
  id: Int
  title: String
  avatar: String
  description: String
  isOpen: Boolean
  count: Int
  participant: Boolean
}

input CreateProjectInput {
  title: String
  avatar: Upload
  description: String
  isOpen: Boolean
  file: Upload
}

input CreateUserInput {
  name: String!
  isAdmin: Boolean
  login: String!
  avatar: String
  password: String!
  positionId: Int
  organizationId: Int
}

input EditUserInput {
  id: Int!
  name: String
  isAdmin: Boolean
  login: String
  avatar: String
  password: String
  positionId: Int
  organizationId: Int
}
